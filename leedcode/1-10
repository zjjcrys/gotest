//No.1
//if use two arrays,it is mistake after translate the value to index
//if use map to restore index, take repeat nums into consideration
//the easiest and fastest is use hashmap to restore index while go through the array, accumulate in time
func twoSum(nums []int, target int) []int {
	index := make(map[int]int)
	res := []int{0, 0}
	index[nums[0]] = 0
	for i := 1; i < len(nums); i++ {
		if _, ok := index[target-nums[i]]; ok {
			res[0] = index[target-nums[i]]
			res[1] = i
			break
		}
		index[nums[i]] = i
	}
	return res
}

//No.2 about single-link operations
//Definition for singly-linked list.
type ListNode struct {
	Val  int
	Next *ListNode
}
//the first version code is too redundant,it can be merged for three for statement
func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
	res := new(ListNode)
	index := res
	carry := 0
	for l1 != nil || l2 != nil {
		tmp := (l1.Val + l2.Val + carry) % 10

		node := new(ListNode)
		node.Val = tmp
		index.Next = node
		index = index.Next

		carry = (l1.Val + l2.Val + carry) / 10
		l1 = l1.Next
		l2 = l2.Next
	}
	if l1 != nil {
		for l1 != nil {
			tmp := (l1.Val + carry) % 10
			node := new(ListNode)
			node.Val = tmp
			index.Next = node
			index = index.Next
			carry = (l1.Val + carry) / 10

			l1 = l1.Next
		}
	}

	if l2 != nil {
		for l2 != nil {
			tmp := (l2.Val + carry) % 10
			node := new(ListNode)
			node.Val = tmp
			index.Next = node
			index = index.Next
			carry = (l2.Val + carry) / 10

			l2 = l2.Next
		}

	}
	if carry > 0 {
		index.Next = new(ListNode)
		node := new(ListNode)
		node.Val = carry
		index.Next = node
		index = index.Next
	}
	return res.Next
}
//No.3 first distinguish substring(continuous) and subsequence
//wrong to count from 0 when repeat dvdf
//use an interval to record the longest cunt,if repeat index not in,no impact
func lengthOfLongestSubstring(s string) int {
	res, left := 0, 0
	hash := make(map[uint8]int) //value is index for count
	for i := 0; i < len(s); i++ {
		index, ok := hash[s[i]]
		if index >= left && ok {
			if res < i-left {
				res = i - left
			}

			left = index + 1
		}

		hash[s[i]] = i
	}
	if res < len(s)-left {
		res = len(s) - left
	}
	return res
}
//No.4 first solution is merge
//take m or n is nil into consideration, take
//another solution is use binary with a little math, fist to get the midian of two array and then compare
func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
	m, n := len(nums1), len(nums2)
	midIndex1, midIndex2 := -1, -1
	mid1, mid2 := 0, 0
	index1, index2, left, rig := 0, 0, 0, 0

	var res float64
	if m == 0 && n == 0 {
		return res
	}

	if (m+n)%2 == 0 {
		midIndex1 = (m + n) / 2
		midIndex2 = midIndex1 + 1
	} else {
		midIndex1 = (m+n)/2 + 1
	}
	rig = midIndex1

	for index1 < m && index2 < n {
		if nums1[index1] < nums2[index2] {
			left++

			if left == rig {
				mid1 = nums1[index1]

				if index1+1 < m && nums1[index1+1] < nums2[index2] {
					mid2 = nums1[index1+1]
				} else {
					mid2 = nums2[index2]
				}

				break
			}
			index1++

		} else if nums1[index1] > nums2[index2] {
			left++
			if left == rig {
				mid1 = nums2[index2]
				if index2+1 < n && nums2[index2+1] < nums1[index1] {
					mid2 = nums2[index2+1]
				} else {
					mid2 = nums1[index1]
				}

				break
			}
			index2++
		} else {
			left += 2
			if left == midIndex1 {
				mid1 = nums1[index1]

				if nums1[index1+1] < nums2[index2+1] {
					mid2 = nums1[index1+1]
				} else {
					mid2 = nums2[index2+1]
				}

			} else if left == midIndex1+1 {
				mid1 = nums1[index1]
				mid2 = nums2[index2]
				break
			}
			index1++
			index2++

		}

	}
	for index1 < m {
		left++
		if left == rig {
			mid1 = nums1[index1]
			if index1+1 < m {
				mid2 = nums1[index1+1]
			}
			break
		}
		index1++
	}
	for index2 < n {
		left++
		if left == rig {
			mid1 = nums2[index2]
			if index2+1 < n {
				mid2 = nums2[index2+1]
			}
			break
		}
		index2++
	}

	if m == 0 || n == 0 {
		if n != 0 {
			nums1 = nums2
		}
		mid1 = nums1[midIndex1-1]
		if midIndex1 < len(nums1) {
			mid2 = nums1[midIndex1]
		}
	}

	if midIndex2 > 0 {
		res = (float64(mid1) + float64(mid2)) / 2
	} else if midIndex1 > 0 {
		res = float64(mid1)
	}

	return res
}
/*
NO.5 the first easy solution is to go through S and expand around center
the second solution is dp, bases on the formula:
P[i,j] is or not palindrome,s[i,j]the largest p,this question not need to record any time
just use two variables enough
*/
func longestPalindrome(s string) string {
	left, right := 0, 0
	dp := make([][]bool, len(s))
	for i := range dp {
		dp[i] = make([]bool, len(s))
	}

	for l := 0; l < len(s); l++ {
		for i := 0; i < len(s)-l; i++ {
			j := i + l
			if i == j {
				dp[i][j] = true
			} else if i+1 == j && s[i] == s[j] {
				dp[i][j] = true
				left, right = i, j
			} else if dp[i+1][j-1] && s[i] == s[j] {
				dp[i][j] = true
				left, right = i, j
			}

		}
	}
	return s[left : right+1]
}
/*
NO.6 the easiest solution is go through s and put every into corresponding location
*/
func convert(s string, numRows int) string {
	hash := make(map[int]string)
	index := 1
	direction := "down" //or up
	res := ""
	if numRows == 1 {
		return s
	}
	for i := 0; i < len(s); i++ {
		hash[index] += string(s[i])

		if index == numRows {
			direction = "up"
		} else if index == 1 {
			direction = "down"
		}

		if direction == "down" {
			index++
		} else {
			index--
		}

	}
	for i := 1; i <= len(hash); i++ {
		res += hash[i]
	}

	return res
}
/*
NO.7 put the x into string and reverse
notice 0,-,bound
*/
const INT_MAX = 2147483647
const INT_MIN = -2147483648

func reverse(x int) int {
	flag := true //
	if x < 0 {
		flag = false
	}
	str := strconv.Itoa(int(math.Abs(float64(x))))
	re := ""
	for i := len(str) - 1; i >= 0; i-- {
		re += string(str[i])
	}
	index := 0
	for index < len(re) && re[index] == '0' {
		index++
	}
	if index >= len(re) {
		return 0
	}
	re = re[index:]
	resInt, _ := strconv.Atoi(re)
	if !flag {
		resInt = -resInt
	}
	if resInt > INT_MAX || resInt < INT_MIN {
		return 0
	}
	return resInt
}
/*
NO.8 first ignore white,check the positive or negative,check 0 before,non-digit over,bound
not exceed 10 bits of 10decimal
*/
const INT_MAX = 2147483647
const INT_MIN = -2147483648

func myAtoi(s string) int {
	index := 0
	res := 0
	var flag byte
	count := 0
	for index < len(s) && s[index] == ' ' {
		index++
	}
	if index >= len(s) {
		return res
	}
	if s[index] == '+' || s[index] == '-' {
		flag = s[index]
		index++
	}
	if index >= len(s) {
		return res
	}
	for index < len(s) && s[index] == '0' {
		index++
	}

	for index < len(s) {
		if count > 10 {
			break
		}
		if s[index]-'0' > 9 { //perfect writing,according to the offical
			break
		}
		res = res*10 + int(s[index]-'0')
		index++
		count++
	}

	if flag == '-' {
		res = -res
	}
	if res > INT_MAX {
		res = INT_MAX
	}
	if res < INT_MIN {
		return INT_MIN
	}
	return res
}
/*
NO.9 put int into string
*/
func isPalindrome(x int) bool {
	if x < 0 {
		return false
	}
	str := strconv.Itoa(x)
	for l, r := 0, len(str)-1; l <= r; {
		if str[l] == str[r] {
			l++
			r--
		} else {
			return false
		}
	}

	return true
}
/*
NO.10 m[i,j]and substructure relationship
*/
func isMatch(s string, p string) bool {
	dp := make([][]bool, len(p)+1)
	for i := 0; i < len(p)+1; i++ {
		dp[i] = make([]bool, len(s)+1)
	}
	dp[0][0] = true
	for i := 2; i <= len(p); i++ {
		if p[i-1] == '*' && p[i-2] != '*' {
			dp[i][0] = dp[i-2][0]
		}
	}
	for i := 0; i < len(p); i++ {
		for j := 0; j < len(s); j++ {
			if s[j] == p[i] || p[i] == '.' {
				dp[i+1][j+1] = dp[i][j]
			}

			if p[i] == '*' {
				if dp[i][j+1] { //one times
					dp[i+1][j+1] = dp[i][j+1]
					continue
				}
				if i-1 >= 0 && p[i-1] == '.' {
					if dp[i+1][j] {
						dp[i+1][j+1] = dp[i+1][j]
					} else if dp[i][j+1] {
						dp[i+1][j+1] = dp[i][j+1]
					}

				}
				if i-1 >= 0 && dp[i-1][j+1] { //sero times
					dp[i+1][j+1] = dp[i-1][j+1]
				} else if i-1 >= 0 && s[j] == p[i-1] { //multi times
					dp[i+1][j+1] = dp[i+1][j]
				}
			}
		}
	}
	return dp[len(p)][len(s)]
}