go 的中文入门文档:https://books.studygolang.com/gobyexample/string-functions/
go 的开源项目汇总https://juejin.im/entry/5c00e5fce51d4550c76d9097

go test 调试方法
go test ./gosdk/user/userinfo_test.go 只输出测试结果
go test -v ./gosdk/user/userinfo_test.go 输出测试结果和测试用例中的自定义输出
go test -v ./gosdk/user/userinfo_test.go -test.run TestGetUserInfoByUid 只测试某个方法

go gdb调试
go build -gcflags "-N -l"
go build -gcflags '-N -l' -o test-unoptimized test.go 去优化编译

//动态数组的删除
CombinationSum3 tmp = tmp[:len(tmp)-1] 重新赋值

//go 字符串排序
自定义[]byte

//二叉搜索树
二叉排序树，不一定是平衡二叉树

//bash 脚本
grep 查找文件， sed编辑文件  awk
195 文件的第10行
cat file.txt | tail -n +10 |head -n 1
awk 'NR == 10' file.txt
sed -n '10,10p' file.txt

193 转义字符\
sed -n -r '/^([0-9]{3}-|\([0-9]{3}\) )[0-9]{3}-[0-9]{4}$/p' file.txt //-r 是正则匹配 -n不打印默认文本
比如 sed '1p' file.txt 意愿是只想打印一行，不加-n时会打印所有
[root@5b6ad735f246 leedcode]# cat file.txt
987-123-4567
123 456 7890
(123) 456-7890
[root@5b6ad735f246 leedcode]# sed -n '1p' file.txt
987-123-4567
[root@5b6ad735f246 leedcode]# sed '1p' file.txt
987-123-4567
987-123-4567
123 456 7890
(123) 456-7890
grep -P '^(\d{3}-|\(\d{3}\) )\d{3}-\d{4}$' file.txt  // 正则过滤
grep -n "123" file.txt 查找出现123，并显示行号


194 转置文件 awk 语法
NR:行号 $0 一行，$1 第一列
NF:总行数
awk '{for(i=1;i<=NF;i++)if(NR==1)s[i]=$i;else s[i]=s[i]" "$i} END {for (i=1;s[i]!="";i++)print s[i]}' file.txt
循环每一行的每一列

192 单词频次记录 sort|uniq -c 排序 awk使用
sort -r：以相反的顺序来排序
sort -n:依照数值大小排序
cat words.txt  | tr -s ' ' '\n'| sort |uniq -c | sort -rn | awk '{print $2, $1}'

//sql question
177 mysql 变量
distinct limit
使用之前先声明
Declare M INT;
set M=N-1;

178 用时高
select Score, (select count(distinct Score) from Scores where Score>=s.Score) Rank from Scores s order by Score desc

180 连续出现所以使用三张表 左连接 left join on
select distinct l1.Num as ConsecutiveNums  from Logs l1 left join Logs l2 on l1.Id=l2.Id-1 left join Logs l3 on l2.Id=l3.Id-1 where l1.Num=l2.Num and l2.Num=l3.Num

184 最大的前三个 count<3
max(Salary)

//堆的使用 堆比较d[i] 从0开始d[2*i+1] d[2*i+2]
如果是从1开始 d[2*i] d[2*i+1]
